from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from handlers.states import SG
from models.adapters.base_adapter import BaseAdapter
from models.adapters.user_adapter import UserAdapter
from models.adapters.upload_documents_adapter import UploadDocumentsAdapter
from models.adapters.form_adapter import FormAdapter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pagination.MagicPaginator import ButtonPagination
from aiogram.utils import exceptions
from configs.config import stages






async def analytics_btn(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(call=call)
    base_adapter = BaseAdapter()
    keyboard_data = await base_adapter.get_users_as_buttons()
    keyboard_data = dict(reversed(keyboard_data.items()))
    custom_keyboard = [InlineKeyboardButton(text='‚óÄÔ∏é', callback_data='back_to_admin_menu_btn')]
    paginator = ButtonPagination(button_data=keyboard_data, amount_elements=5)
    await state.update_data(paginator=paginator)
    try:
        keyboard = paginator.pagination(custom_keyboard=custom_keyboard)
        await call.message.edit_text(text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>", reply_markup=keyboard)
        await SG.user_list_pagination.set()
    except KeyError:
        await call.message.edit_text(text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!</b>")



async def go_back_to_analytics_btn(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await analytics_btn(call, state)


async def view_detail_user(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = int(call.data.split("#")[2])
    base_adapter = BaseAdapter(user_id)
    form_adapter = FormAdapter()
    user = await base_adapter.get_user(user_id)
    form = await form_adapter.get_form(user_id)
    await state.update_data(user_id=user_id)
    documents_adapter = UploadDocumentsAdapter()
    drive_link = await documents_adapter.get_drive_link(user_id)

    # –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç
    if user.user_number is None and form is None:
        user_fio = "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        user_number = "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        keyboard = await base_adapter.analytics_kb(show_form_button=False)
    # –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    elif user.user_number is not None and form is None:
        user_fio = "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        user_number = user.user_number
        keyboard = await base_adapter.analytics_kb(show_form_button=False)
    # –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É
    else:
        user_fio = user.user_fio
        user_number = user.user_number
        keyboard = await base_adapter.analytics_kb(show_form_button=True)





    products = {"mortgage_btn": "–ò–ø–æ—Ç–µ–∫–∞ –ø–æ–¥ –∫–ª—é—á", "mortgage_new_flat_btn": "–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ –∫–ª—é—á", "None": "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω" }


    if user.user_manager_id != 0000000000:
        partner = await base_adapter.get_user(user.user_manager_id)
        partner_name = f"@{partner.user_name}"
    else:
        partner_name = "–ë–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
    text = "<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>  üîé\n\n"\
           f"<b>------------------------</b>\n" \
           f"<b>Username:</b> @{user.user_name}\n" \
           f"<b>Telegram ID:</b> <code>{str(user.user_id)}</code>\n" \
           f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.register_date}\n" \
           f"<b>–ò–º—è:</b> {user_fio}\n" \
           f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{user_number}</code>\n\n" \
           f"<b>üìà –≠—Ç–∞–ø:</b> {stages[user.user_stage]}\n" \
           f"<b>üìç –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:</b> {products[str(user.product_choice)]}\n" \
           f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª—ã:</b> {drive_link}\n" \
           f"<b>üß≤ –ü–∞—Ä—Ç–Ω–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:</b> {partner_name}"
    await call.message.edit_text(text=text, reply_markup=keyboard)


async def show_form(call: types.CallbackQuery, state: FSMContext):
    await SG.user_list_pagination.set()
    accomodation_types = {"house": "–î–æ–º", "new_house": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–∞", "flat": "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "new_flat": "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞", "commercial": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è", "apart": "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã"}
    symbols = {False:"‚ùå", True:"‚úÖ"}
    citizenship = {"ru": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è", "different": "–î—Ä—É–≥–æ–µ"}

    data = await state.get_data()
    user_id = data.get("user_id")
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton('‚óÄÔ∏è   –ù–∞–∑–∞–¥    ', callback_data=f'item#user_number#{user_id}'))
    form_adapter = FormAdapter()
    form = await form_adapter.get_form(user_id)
    await call.message.edit_text(f"<b>ID –ö–ª–∏–µ–Ω—Ç–∞:</b> {form.form_user_id}\n" 
                                 f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {citizenship[form.citizenship]}\n" 
                                 f"<b>–†–∞–∑–º–µ—Ä –∏–ø–æ—Ç–µ–∫–∏:</b> {form.estimated_mortgage_amount}\n" 
                                 f"<b>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b> {accomodation_types[form.accommodation_type]}\n" 
                                 f"<b>–†–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞:</b> {form.down_payment_amount}\n"
                                 f"<b>–°—Ä–æ–∫ –∏–ø–æ—Ç–µ–∫–∏:</b> {form.mortgage_term}\n"
                                 f"<b>–î–µ—Ç–∏ –ø–æ—Å–ª–µ 2018:</b> {symbols[form.children_after_2018]}\n"
                                 f"<b>–ù–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {symbols[form.credits_in_the_past]}\n"
                                 f"<b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:</b> {symbols[form.official_job]}\n"
                                 f"<b>–°—É–¥–∏–º–æ—Å—Ç–∏:</b> {symbols[form.convictions]}\n"
                                 f"<b>–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ:</b> {symbols[form.bankruptcy]}\n"
                                 f"<b>–ü—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º:</b> {symbols[form.late_payments]}\n"
                                 f"<b>–ë—Ä–∞–∫:</b> {symbols[form.marriage]}\n"
                                 f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:</b> {form.children_amount}\n",
                                 reply_markup=keyboard)



# pagination handler
async def user_list_pagination(call: types.CallbackQuery, state: FSMContext):
    paginator = (await state.get_data()).get('paginator')
    keyboard = paginator.page_switch(call.data.split('#')[1])
    try:
        await call.message.edit_text(text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>",
                                       reply_markup=keyboard)
        await state.update_data(paginator=paginator)
    except exceptions.MessageNotModified:
        await call.answer(text='–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', show_alert=True)






def register_analytics_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        analytics_btn,
        lambda callback_query: callback_query.data == 'admin_analytics_btn',
        state='*'
    )
    dp.register_callback_query_handler(
        user_list_pagination,
        lambda callback_query: callback_query.data.split("#")[0] == 'amg',
        state=SG.user_list_pagination
    )
    dp.register_callback_query_handler(
        view_detail_user,
        lambda callback_query: callback_query.data.split("#")[1] == "user_number",
        state=SG.user_list_pagination,
    )
    dp.register_callback_query_handler(
        show_form,
        lambda callback_query: callback_query.data == "show_form",
        state="*"
    )
    dp.register_callback_query_handler(
        go_back_to_analytics_btn,
        lambda callback_query: callback_query.data == "go_back_to_analytics_btn",
        state="*"
    )